learngit_note_learnBy:(Git教程 - 廖雪峰的官方网站)https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

1.创建一个版本库
1.1创建一个空目录 $ mkdir learngit
1.2进入创建的目录 $ cd learngit
1.3显示当前目录  $ pwd（文件名路径推荐全英文）

2.将刚创建的目录变成Git可以管理的仓库
2.1初始化git目录 $ git init

3.把文件添加到版本库
3.1编写一个文件readme.txt
3.2添加文件至版本库 $ git add readme.txt（把要提交的所有修改放到暂存区（Stage））
3.3把文件提交到仓库 $ git commit -m "改动记录描述说明" （一次性把暂存区的所有修改提交到分支）
3.4可添加多个文件并一次性提交所以添加文件
	$ git add file1.txt
	$ git add file2.txt file3.txt
	$ git commit -m "add 3 files."

PS:
提交前需要确保 set your account's default identity

	$ git config --global user.email "lshch.lshch@qq.com"
	$ git config --global user.name "cc"

相关报错提示
*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: empty ident name (for <(NULL)>) not allowed

4.修改提交文件
4.1修改文件readme.txt
4.2更改后查看仓库当前的状态 $ git status
4.3查看具体修改了什么内容 $ git diff readme.txt

5.版本回退
5.1查看历史记录 $ git log
5.2查看简洁的历史记录 $ git log --pretty=oneline
5.3回退当前版本至上一个版本 $ git reset --hard HEAD^（上上一个版本就是HEAD^^ 或者 HEAD~2）
5.4查看回退后的文件 $ cat readme.txt
5.5指定回到的某个版本 $ git reset --hard commit_id版本号（可简写前几位）
5.6查看记录下你的每一次命令 $ git reflog (可以看到每一次提交的commit_id便于回退到任意版本)

6.管理修改
6.1查看工作区和版本库里面最新版本的区别 $ git diff HEAD -- readme.txt

7.撤销修改
7.1丢弃工作区的修改 $ git checkout -- <file> (让这个文件回到最近一次git commit或git add时的状态)
7.2把暂存区的修改撤销掉（unstage），重新放回工作区 $ git reset HEAD <file> （再结合$ git checkout -- <file>即可撤销修改掉暂存区的文件file）
7.3撤销修改已提交的文件：参考同5小节版本回退方法

PS：
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原;
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

8.删除文件
8.1类似本地操作删除 $ rm <file> (或直接在文件管理器中把没用的文件删了)
8.2从版本库中删除该文件 $ git rm <file> (执行 $ git commit -m ""后生效)

PS:
文件被人为删除后，工作区和版本库就不一致了，可用git status命令查看哪些文件被删除了;
现在有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit;
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本:$ git checkout -- <file>;

				!!!补充：
				1.Git窗口退出时显示stopped的解决办法
				1.1.输入exit指令
				1.1.1
				$ exit
				输出：
				logout
				There are stopped jobs.

				1.1.2查看隐藏的进程
				$ jobs -l
				输出：
				[1]+  Stopped                 vim test.txt
				bash: jobs: l: no such job

				1.1.3清理stopped进程
				$ kill 进程ID （亲测后仍有问题）
				$ kill -9 进程ID (问题解决)

				1.2直接点击窗口打叉

				2.VIM中的保存和退出、VIM退出命令、如何退出vim编辑、VIM命令大全
				2.1退出命令是，按ESC键 跳到命令模式，然后输入:q（不保存）或者:wq（保存） 退出。
				2.2更多退出命令：
				:w 保存文件但不退出vi 
				:w file 将修改另外保存到file中，不退出vi 
				:w! 强制保存，不推出vi 
				:wq 保存文件并退出vi 
				:wq! 强制保存文件，并退出vi 
				:q 不保存文件，退出vi 
				:q! 不保存文件，强制退出vi 
				:e! 放弃所有修改，从上次保存文件开始再编辑命令历史
				2.3详细说明参考：https://blog.csdn.net/feosun/article/details/73196299

9.远程仓库
9.1创建SSH Key $ ssh-keygen -t rsa -C "youremail@example.com"
9.2将在主目录下生成的公钥设置在远程仓库的ssh key中
9.3关联远程仓库 $ git remote add origin git@github.com:michaelliao/learngit.git 
		（origin为自定义远程仓库名，git@github.com:michaelliao/learngit.git是当前使用远程git仓库的路径）
9.4把本地库的所有内容推送到远程库上 $ git push -u origin master（第一次提交带 -u,以后提交可简化;origin 自定义远程仓库名）
9.5查看所有关联的远程仓库 $ git remote -v
9.6从远程仓库克隆 $ git clone git@github.com:michaelliao/gitskills.git （git@github.com:michaelliao/gitskills.git为克隆目的远程git仓库的路径）

10分支管理
10.1创建与合并分支
10.1.1创建并切换分支 $ git checkout -b dev （git checkout命令加上-b参数表示创建并切换)
10.1.2创建分支 $ git branch dev
10.1.3切换分支 $ git checkout dev
10.1.4查看当前分支 $ git branch
10.1.5修改仓库文件并提交 $ git add readme.txt   $ git commit -m "branch test"
10.1.6dev分支的工作完成，切换回master分支 $ git checkout master 
10.1.7把dev分支的工作成果合并到master分支上 $ git merge dev (默认为Fast forward模式合并)
10.1.8合并成功后，删除dev分支 $ git branch -d dev
	PS:命令总结
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
	看到分支合并图 $ git log --graph
	当切换到master后未合并删除分支前,修改提交master中内容会引发冲突，解决冲突的办法是将master中的内容更改成分支中修改后的内容再添加提交，最后再删除分支；
	
10.2分支管理策略
10.2.1创建并切换分支 $ git checkout -b dev
10.2.2修改仓库文件并提交 
10.2.3切换回master $ git checkout master
10.2.4禁用Fast forward模式合并分支 $ git merge --no-ff -m "merge with no-ff" dev 
	（--no-ff参数，表示禁用Fast forward，因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去）
10.2.5查看分支历史 $ git log

10.3储存分支
10.3.1“储藏”工作现场 $ git stash
10.3.2查看工作现场 $ git stash list
10.3.3恢复工作现场 1)$ git stash pop恢复并删除现场; 2)$ git stash apply恢复但不删除现场（用$ git stash drop删除）
10.3.4恢复指定的stash $ git stash apply stash@{0}
